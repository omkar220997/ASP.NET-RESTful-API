						 **ASP DOT NET RESTFUL API**	 		
					=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-------------------------------------------------------------------------------------------------------------------------------------------------------------
**Using MVC Patterns for Building RESTful APIs:
	1) Model-view- Controller is an architectural pattern for implementing user interfaces.
	2) Encourages loose coupling and separation of concerns.
	3) It is not a full application architecture, typically MVC is used in presentation layer.
	4) API also have a user interface for a consumer of that API.
	5) MVC consist three parts:
		a) Model : Which is handles the logic of application data. A Model in this sense can contain code to 
			   retrieve or store data at that level. 
		b) View : View represent a part of the application that handles displaying data. 
		c) Controller : Controller then handles the interaction between the view and the model including handling 
				the user input. 
	6) The user which interacts with the APIs is the API consumer.
	7) View and the controller both depend on the Model and controller is depend on view also.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
**API Application on Visual Studio:
	1) In appsetting.json there is some default login configuration and allowed hosts.
	2) In Controllers we have a WeatherForecastController. This is a controller with some dummy code. So if you want to 
	   start from scratch you can delete that controller.
	3) Also there is one class named WeatherForecast.cs if it is not required then you can also delet that class.	
	4) The class which contains Main method that class is the starting point of the application.
	5) While running the web application, that needs to be hosted, that's what's created by CreateHostBuilder.
	6) We call Build() on that IHostBuilder and Run() to effectively run it.
	7) There is also one Startup class as th startup type.
	8) In the constructor of a startup class configuration object is injected. That allow us to access configuration settings.
	9) In Startup class there are two methods of importance here are ConfigureServices and Configure.
       10) ConfigureServices is used to add services to the built-in dependency injection container and to configure those services.
       11) Services should be seen as a broad concept. Services we add can later be injected into other piece of code that live in that application.
       12) In ConfigureServices there is AddControllers() which can register those services that are typically required when building APIs.
       13) Second method is Configure() method uses the services that are registered and configured in the ConfigureServices().
       14) The Configure method is used to specify how an ASP.NET application will respond to individual HTTP requests.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
**Steps:
	1) Add Nuget Packages which are required for our project.
	2) Open package Manager Console
	3) Write Add-Migration with some Name or message in Package Manager console.
	4) Run the Project to add data in our data store.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
**REST:
	1) All RESTful APIs are return JSON
	2) REST is not just a building an API which consist of few HTTP services that return JSON, that is WEB API. REST is an architectural style.
	3) Defination: Representational state transfer is intended to evoke an image of how a well-designed web application behaves:			
		       a network of web pages( a virtual state-machine ) and where the user progresses through an application by selecting links(state transitions)  
		       resulting in the next page(representing the next state of the application) being transffered to the user and rendered for their use.
	4) REST is an architectural style not a standard but we use standards to implement this architectural style.
	5) REST Constraints: REST is defined by 6 constraints(one optional), A constraint is a design decision that can have positive and negative impacts.
		a) Uniform Interface Constraints:It states that the API and API consumers share one single technical interface.
			-There are four subconstraints for this uniform interface constraint. 	
				a.1) Identification of resources : A resource is conceptually separate from its representation  written for the client.
				a.2) Mnipulation of Resources : (through Representations) It states that when a client holds representatioin of a resource
								including any possible metadata, it should have enough information to modify or delete the
								resource on the server provided it has permission to do so.
				a.3) Self-descriptive Message : This states that each message must include enough information  to descibe to process the messsage
				a.4) Hypermedia as the Engine of Application State(HATEOAS) : This is the one that lots of RESTful systems fail to implement.
								This drives how to consume and use the API and allows for a self-documenting API.
		b) Client-Server Constraints : It enforces client server architecture, which in turn enforces separation of concerns. So client and the server 
				are completely separated.
		c) Statelessness : Every request contains a request itself, so State is thus not kept on the server, but on the client.
		d) Layered Sysytem : A REST-based solution can comprised of multiple architectural layers just as almost all application architectures we use today.
				These layers can be modified, added, removed can be physical or logical but no one layer can directly access a layer that's 
				beyond the next one. So REST restricts knowledge to a single layer.
		e) Cacheable : This states that each response message must explicitly state if it can be cached or not. We can eliminate some client server interaction
			        and at the same time prevent clients from reusing out-of-date data.
		f) Cod eon Demand (Optional) : This constraint states that a server can extend or customize client functionality.
	6) A system is only considered RESTful when it adheres to all the required constraints.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**The Richardson Maturity Model : 
	1) This model grades APIs by the their RESTful maturity.
		a) Level 0 ( the Swamp of POX or plain old XML ) : The implementing protocol is HTTP, is used for remote interaction and the rest of the protocol 
		 		isn't used as it should be.
		b) Level 1 (Resources) : We can use multiple URIs and each URI is mapped to a specific resource. According to software development it is reducing complexity 
				by working with different end points instead of one large service end point. 
		c) Level 2 (Verbs) : To reach level 2 API the correct HTTP verbs like GETS, POST, PUT, PATCH and DELETE are used as they are intended by the protocol.
				From software design point opf view we have to remove unnecessary variation. We have to use same verb to handle the same type of situation.
		d) Level 3 (Hypermedia) : That the API supports Hypermedia as the Engine of Application State, in this we not only get names as a return but also get the links.
				from a software design point of view this means we have introduced discoverability and self documentation.
	2) Level 3 is a precondition for a RESTful API which means when you reach level 3 we can start think about the RESTful APIs.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** Structuring and Implementing the Outer Facing Contract:
	1) It consists of three big concepts consumer of an API uses to interact with that API.
		a) Resource Identifier :
		b) HTTP Method : 
		c) Payload : 
	2) Uniform Interface constraint does cover the fact that resources are identified by URIs.
	3) Each resource have its own URI but for naming of the resource there is no any standard.
	4) Resource Naming Guidelines:
		a) Resource namin in the URI shuould always be a noun.
		b) While choosing the noun consider about the conveying the meaning.  
		c) Another important thing which represented in API contract is hierarchy.
		d) While naming don't use filters, sorting orders or etc instead of maikng them URI use it as a Query.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Steps: 
	1) Add controllers by right click on controller and then add new class.
	2) Inherit that class from the ControllerBase class and write using statement according to that class.
	3) Next we have to implement the [ApiController] attribute.
	4) To return a data we need to add action on our controller. 
	5) In this we add IActionResult which defines a contract that represents the result of an action method.
	6) For getting the result as a return from a repository we have an instance of repository so we can inject instance through Constructor injection.
	7) At constructor check for Null by throwing ArgumentNullexception.
	8) Create a instance in action method and then serialize data to Json and retrun it and form that w ecan use JsonResult.
	9) 
		




















 	

			        
